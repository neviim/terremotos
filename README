Terremotos:
  
      As consulta a base das ultimas 200 ocorrencia de terremoto no mundo:

            Últimas 200 ocorrências de terremotos ocorridas no mundo, este script faz a leitura por scraping desta lista
            armazena em um banco de dados Mongodb e ao ser executado novamente ele verifica se os dados recebidos estão
            gravados, não estando efetua a inserção evitando haver duplicação na base podendo ser executado quantas vezes
            for necessária, ele só fará o incremento caso seja uma nova ocorrência.


      Virtualenv:

            $ sudo virtualenv --python=python3.7 terremotos
            $ source ~/virtual/terremotos/bin/activate
            (terremotos) ➜

      Dependencias:

            pip install --upgrade pip
            pip install -r requirements.txt

            
            Implementando Influxdb:
                  $ pip install influxdb
                  $ pip install --upgrade influxdb
                  $ pip uninstall influxdb

            Querendo testar o funcionamento em n vorsões python:

                  # pip install pytest
                  $ pip install tox
                  $ tox -e docs

                  # Gerar um arquivo tox.ini automaticamente
                  $ tox-quickstart
                  $ pytest


      VsCode:

            settings.json

                  {
                        "python.pythonPath": "\\__CondaVirtual\\pytr37\\python"
                  }


      Banco de dados: 

            Mongodb é considerado que esteja Up
            com o banco e a collection criada.

                  Cria database...: terremotos
                  Cria Collections: registros


      Ferramentas utilizadas:

            Python 3.7
            Robo3T 1.2
            VsCode 1.27.1


      Classe implementada:

            AlertaNt7Terremotos()

                  Metodos:

                         cripto_md5(self, texto, encoding='utf-8')
                         cripto_sha1(self, texto, encoding='utf-8')
                         get_latitude(self, novo_link)
                         get_scraping(self)
                         formato_json(self, terremotos)
                         data_hora(self, localidade='America/Sao_Paulo', formato='%d/%m/%Y %H:%M')
                         grava_novas_ocorrencias(self, listjson, host='devops.joaopauloii', porta=27017)
      

      Modo de uso:

            import alerta_nt7 as tr 

            # utilizando class alertaNt7Terremotos estrair dados
            url = 'http://monitorglobal.com.br/terremotos.html'
            tjson = []

            # conecta no site e captura as 200 ultimas ocorrencias
            terremotos = tr.AlertaNt7Terremotos(url)
            scrap = terremotos.scraping()
            listjson = terremotos.cria_json(scrap)

            # os insidentes que nao estiver no banco serão gravados.
            terremotos.grava_novas_ocorrencias(listjson)

            # retorna data e hora local em dois formatos
            data1, data2 = terremotos.data_hora()
            print(data1, data2)           



      Maquina virtual: ~/virtual/py367

            Utilizando python 3.7

            $ source ~/virtual/py36/bin/activate
                        
            (py37) ➜
            (py37) ➜
            (py37) ➜ python alerta_nt7.py 


      Crontab:

            # fara com que este script seje executado a cada 30 minutos, 
            # respeitando as configuracoes da maquina virtual: /home/neviim/virtual/terremotos 
            $ crontab -e
            0,30 * * * * cd /home/neviim/src/_projetos/terremotos/src && /home/neviim/virtual/terremotos/bin terremotos.py > /dev/null 2>&1



Git:

      git config --global user.email "you@example.com"
      git config --global user.name "Your Name"
      git status

      git add *
      git commit -m "Alteracao na estrutura da base de dados."
      git commit -a -m "Change titles and styling on homepage"  # com este comando pode omitir a etapa do (git add)
      
      git push origin master


Pesquisa mongodb:

      db.getCollection('registros').find({})
      db.getCollection('registros').find({"magnitude": {"$gt":"5.5"}})
      db.getCollection('registros').find({"magnitude": {"$gt":"5.5"}}).count()